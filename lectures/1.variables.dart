// ignore_for_file: unused_local_variable, prefer_interpolation_to_compose_strings, cascade_invocations, prefer_const_declarations, omit_local_variable_types, prefer_final_locals, inference_failure_on_uninitialized_variable
import 'dart:io';

void introducion() {
  //? История дарта
  //* Dart - язык программирования, разработанный компанией Google
  //* Dart 1 - 2011 год - создан для замены JavaScript
  //* Dart 2 - 2018 год - nullsafety
  //* Dart 3 - 2022 год - Сверхвысокоуровневый язык программирования

  //? Основные концепции для сверхвысокоуровневых языков программирования:
  //* 1. ООП (Generics, mixins, sealed)
  //* 2. Garbage Collector
  //* 3. Null-safety
  //* 4. Patterns
  //* 5. Extensions
  //* 6. Async
  //* 7. Threding (Isolates)
  //* 8. Functional Programming
  //* 9. Package Manager (Pub)
  //* ...

  //? Особенности Dart:
  //* 1. GOAT кроссплатформенность (Flutter) (macos, windows, linux, WEB, android, ios) x86_64, arm32_64
  //* 2. JIT/AOT компиляция (Just-In-Time, Ahead-Of-Time)
  //* 3. Статическая сильная типизация с поддержкой динамической типизации
  //* 4. Быстро-растущий язык программирования (+500% к комьюнити за 2023 год)
  //* 5. Синтаксис похож на C++, Java, JavaScript

  //; shelf, dartfrog, drift, flame...
}

/// Пример документации
void comments() {
  // Комментарии в Dart:

  // Однострочный комментарий

  /*
    Многострочный
    комментарий
  */

  /// Документация (для документации кода)
}

void simpleTypes() {
  // Список примитивных типов данных:

  //* int - числовой тип для целочисленных значений (min -2^63, max 2^63-1)
  //* double - числовой тип для чисел с плавающей точкой (64-bit) (min 4.9e-324, max 1.8e+308)
  //* String - строковый тип
  //* bool - логический тип (true/false)
  //* dynamic - динамический тип (может хранить любой тип данных)
  //* Object - базовый тип для всех объектов

  //! Абсолютно всё в современном программировании является объектом

  // Примеры:
  int number = 42;
  //! number = '42'; // Ошибка: 'String' is not a subtype of type 'int'
  double fraction = 3.14;
  String text = 'Hello, World!';
  bool isTrue = true;
  Object object = 42;
  dynamic anyType = 42;
  anyType = '42'; // Отработает без ошибок
  object = '42'; // Отработает без ошибок

  //? Различия между C++ и сверхвысокоуровневыми языками программирования, таких как Dart:
  //? 1. Один тип для нужд программиста: числа - int, дроби - double и т.д. нету заморочек с разновидностью типов:
  //? Например как в C++: int, short, long, long long, float, double, long double и т.д.
  //? В современном программировании не нужно заботиться о затраченной памяти на переменные, так как компилятор сам оптимизирует код
  //? 2. Отсуствие ссылок и указателей, так как все переменные являются объектами и работают с ними через ссылки

  //; Советы
  //; Не используйте dynamic или Object без необходимости!
  //; Необходимость - парсинг JSON, печать в консоль.
}

void localVariablesModifiers() {
  // Модификаторы для локальных переменных (вне классов)

  //* var - самостоятельно определяет - выводит тип переменной
  //* final - указывает на то, что переменная может быть присвоена только один раз
  //* const - указывает на то, что переменная является константой времени компиляции

  //? Различие между final и const:
  //? 1. В рамках локального объявления (вне классов) переменная может быть объявлена, но инициализирована позже
  //? Это справедливо для final, но не для const
  //? 2. final - переменная может быть инициализирована во время выполнения программы
  //? const - переменная должна быть инициализирована во время компиляции
  //? 3. Объект который создается в рантайме не может быть константой времени компиляции (не может быть const)

  //! При использовании модификаторов тип переменной может быть опущен, так как все описанные выше модификаторы
  //! могут сами выводить тип переменной, но при var тип опускается всегда
  //! Нужно быть осторожным с автоматическим выводом типов, так как может вывести dynamic

  // Примеры:
  var number = 42;
  final double fraction = 3.14;
  final goldenRatio = 1.61803398875;
  const String text = 'Hello, World!';
  const isTrue = false;

  //! const someProblems = (-1).abs(); // Это не может быть константой времени компиляции, так как фукнция запускается в рантайме
  final noProblems = (-1).abs(); // Это не проблема для final

  // ignore: prefer_typing_uninitialized_variables
  final someFinalInt; //! Плохая практика, так как final вывел dynamic
  // final int someFinalInt; - так лучше
  someFinalInt = 10;

  //? Различие между C++
  //? 1. В C++ нет как такового модификатора final, для этого придется использовать ссылки или передавать в функцию как const

  //; Советы
  //; 1. Всегда используйте модификаторы для переменных, так как это улучшает читаемость кода
  //; 2. Пытайтесь всегда использовать final/const, во избежание багов
}

void termsOfConduction() {
  // Правила/рекомендации по стилю написания кода:

  //* Имена переменных должны быть понятными и описательными (лучше переменная в 40 символов, но понятная, чем в 5, но непонятная)
  //* Имена переменных должны быть написаны в lowerCamelCase (первое слово с маленькой буквы, каждое последующее с большой)
  //* Имена переменных не должны быть слишком общими (например: data, value, number)
}

void handyFuntionsAndMethods() {
  // Некоторые полезные функции и методы:
  //* print(PARAM) - выводит данные в консоль с переводом строки
  //* stdout.writeln(PARAM) - выводит данные в консоль с переводом строки
  //* stdout.write(PARAM) - выводит данные в консоль без перевода строки
  //* stdin.readLineSync()! - считывает строку из консоли
  //* int.parse(PARAM) - преобразует строку в число
  //* double.parse(PARAM) - преобразует строку в дробь
  //* PARAM.toString() - преобразует любой объект в строку

  // Примеры:
  print('Hello, World!');
  print(1024);

  stdout.write('Input ');
  stdout.write('integer please: ');

  final inputNumber = stdin.readLineSync()!;

  final integerNumber = int.parse(inputNumber);
  final doubleNumber = double.parse(inputNumber);

  stdout.writeln('You entered: ' + integerNumber.toString());
  print('You entered: ' + doubleNumber.toString());

  //? Различие между C++
  //? 1. В C++ нету глобальной системы типов, так что в нем не всё является объектом
  //? Что накладывает ограничения, самый простой пример - вывод в консоль
  //? cout в С++ очень ограничен, так как не у каждого типа есть перегруженный оператор вывода
  //? А в сверхвысокоуровневых языках программирования, у всех объектов есть некоторые свойства и методы
  //? Самый простой пример - функция toString() есть у всех объектов
}

void stringTricks() {
  // Полезные фишки со строками (интерполяция строк)

  //* '$PARAM' - интерполяция строки (без необходимости конкатенации и вызова toString())
  //* '${PARAM + 42}' - интерполяция строки (для сложных выражений)

  // Примеры:
  const name = 'John';
  const age = 42;

  print('Hello, $name! You are $age years old!');
  const text = 'Hello, $name! You are $age years old!';
  print(text);
  // Сравните с
  // print('Hello, ' + name + '! You are ' + age.toString() + ' years old!');
  // Или
  // cout << "Hello, " << name << "! You are " << age << " years old!" << endl;

  print('Sum of 10 and 32 is ${10 + 32}');
  print('Age of $name in binary ${age.toRadixString(2)}');

  //? Различие между C++
  //? 1. В C++ нету интерполяции строк, так что приходится использовать конкатенацию и преобразование типов

  //; Советы
  //; Всегда используйте интерполяцию строк, так как это улучшает читаемость кода
}

void main() {
  //; Доп. советы
  //; 1. Слушайтесь линтер, так как он помогает избежать многих ошибок и соблюдает стиль написания кода
  //; 2. Читайте ошибки! В отличии от C++ в них внятно написано, что не так и где именно
  //; 3. Цените LSP Analyzer, так как он помогает быстро понять, что не так с кодом
  //; 4. Нажимайте alt+enter для quick-fix, так как это ускоряет процесс написания кода

  //? Задания
  //? 1. Пройти квиз
  //? 2. Сделать домашку
  stringTricks();
  //handyFuntionsAndMethods();
}

// **Домашнее задание #1 - Переменные**

// **Задание:**
// Напишите программу, которая:
// - Создаёт переменные различных типов: int, double, String, bool, dynamic, Object и присваивает им значения.
// - Запрашивает у пользователя ввод нескольких данных с клавиатуры.
// - Преобразует введённые строки в численные значения.
// - Выводит все переменные и введённые данные, используя интерполяцию строк.

// **Программа должна:**
// 1. Создать переменную int для хранения возраста и присвоить ей значение 25.
// 2. Создать переменную double для хранения роста и присвоить ей значение 1.75.
// 3. Создать переменную String для хранения имени и присвоить ей значение 'aksenoff'.
// 4. Создать переменную bool для хранения логического значения является ли студентом и присвоить ей значение true.
// 5. Создать переменную dynamic, которая сначала будет числом, а затем строкой 'age multiply by 5 is N', где N это age * 5
// 6. Создать переменную Object и присвоить ей значение 'SUAI'.
// 7. Запросить у пользователя ввод имени, возраста и любимого числа.
// 8. Преобразовать введённую строку возраста в целочисленное значение, а введенное любимое число в дробное значение.
// 9. Вывести все переменные и введённые данные, используя интерполяцию строк.

// **Вывод должен быть в формате:**
// Name: X, Age: X, Height: X, Student: X, Dynamic: X, Object: X
// Your name: X, Your age: X, Your favorite number: X

// Где X - нужные значения
